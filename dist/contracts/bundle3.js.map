{
  "version": 3,
  "sources": ["../../src/lottery/sdk.ts", "../../src/lottery/lotto.ts", "../../src/lottery/index.ts"],
  "sourcesContent": ["import { MappingStore, State, Store } from \"./type\";\n\nexport function useStore<ValueType>(key: string, defaultValue: ValueType): Store<ValueType> {\n  return (state: State) => [\n    () => state.get(key) ?? defaultValue,\n    (value: ValueType) => state.set(key, value)\n  ]\n}\n\nexport function useMapping<Params extends any[], ValueType>(keys: string[], defaultValue: ValueType): MappingStore<Params, ValueType> {\n  return (state: State) => [\n    (...args: Params) => {\n      // assert: keys.length === args.length + 1\n      const interleavedKey = [keys[0]];\n      const pathKeys = keys.slice(1);\n      for(let i = 0; i < pathKeys.length; i++) {\n        interleavedKey.push(pathKeys[i], args[i]);\n      }\n      return state.get(interleavedKey.join('/')) ?? defaultValue;\n    },\n    (...args: [...Params, ValueType]) => {\n      const interleavedKey = [keys[0]];\n      const pathKeys = keys.slice(1);\n      const keyArgs = args.slice(0, -1) as Params;\n      for(let i = 0; i < pathKeys.length; i++) {\n        interleavedKey.push(pathKeys[i], keyArgs[i]);\n      }\n      state.set(interleavedKey.join('/'), args[args.length - 1]);\n    }\n  ]\n}\n", "import { getBalance, sendCoins } from '~bank';\nimport { useMapping, useStore } from './sdk';\nimport { MappingStore, Msg, State, Store } from './type';\n\n// State variables\nconst pool: Store<number> = useStore('pool', 0);\nconst participantStatus: MappingStore<[string], boolean> = useMapping(['participantStatus'], false);\nconst participants: Store<string[]> = useStore('participants', []);\nconst winner: Store<string> = useStore('winner', '');\n\nexport class Contract {\n  msg: Msg;\n  address: string;\n  pool: () => number;\n  setPool: (value: number) => void;\n  participantStatus: (address: string) => boolean;\n  setParticipantStatus: (address: string, value: boolean) => void;\n  participants: () => string[];\n  setParticipants: (value: string[]) => void;\n  winner: () => string;\n  setWinner: (value: string) => void;\n\n  constructor(state: State, { msg, address }: { msg: Msg; address: string }) {\n    this.msg = msg;\n    this.address = address;\n\n    [this.pool, this.setPool] = pool(state);\n    [this.participantStatus, this.setParticipantStatus] = participantStatus(state);\n    [this.participants, this.setParticipants] = participants(state);\n    [this.winner, this.setWinner] = winner(state);\n  }\n\n  // Public methods\n  getTotalPool(): number {\n    return this.pool();\n  }\n\n  getParticipantStatus(address: string): boolean {\n    return this.participantStatus(address);\n  }\n\n  getParticipants(): string[] {\n    return this.participants();\n  }\n\n  getWinner(): string {\n    return this.winner();\n  }\n\n  // Add a participant to the lottery\n  #addParticipant(address: string) {\n    if (this.winner() !== '') {\n      throw new Error('A winner has already been drawn.');\n    }\n\n    const currentParticipants = this.participants();\n\n    if (currentParticipants.includes(address)) {\n      throw new Error(`This address has already entered the lottery`);\n    }\n\n    currentParticipants.push(address);\n    this.setParticipants(currentParticipants);\n    this.setParticipantStatus(address, true);\n  }\n\n  // Pick a winner randomly from the participants\n  #pickWinner(): string {\n    const currentParticipants = this.participants();\n    if (currentParticipants.length === 0) {\n      throw new Error('No participants available to pick a winner.');\n    }\n\n    if (this.winner() !== '') {\n      return this.winner();\n    }\n    \n    const randomIndex = Math.floor(Math.random() * currentParticipants.length);\n    const winnerAddress = currentParticipants[randomIndex];\n    this.setWinner(winnerAddress);\n    return winnerAddress;\n  }\n\n  // Deposit funds into the lottery pool\n  deposit(amount: number) {\n    const sender = this.msg.sender;\n    if (amount <= 0) {\n      throw new Error('Deposit amount must be greater than zero.');\n    }\n    sendCoins(sender, this.address, { uusdc: amount });\n    this.#deposit(amount);\n  }\n\n  #deposit(amount: number) {\n    const currentPool = this.pool();\n    this.setPool(currentPool + amount);\n  }\n\n  enterLottery({entryFee}: {entryFee: number}): Boolean {\n    if (entryFee < 10000) {\n      throw Error('Entry fee is too low.');\n    }\n\n    const sender = this.msg.sender;\n\n    if (this.winner() !== '') {\n      throw new Error('A winner has already been drawn.');\n    }\n\n    const currentParticipants = this.getParticipants();\n\n    if (currentParticipants.includes(sender)) {\n        const allParticipants = this.getParticipants();\n        throw new Error(\n        `Address ${sender} has already entered the lottery. Current participants: ${JSON.stringify(allParticipants)}.`\n        );\n    }   \n\n    sendCoins(sender, this.address, { uusdc: 10000 });\n    this.#addParticipant(sender);\n    this.#deposit(entryFee);\n\n    return true;\n  }\n\n  drawWinner(): string {\n    const winnerAddress = this.#pickWinner();\n    const prizeAmount = this.pool();\n\n\n    if (prizeAmount === 0) {\n      throw new Error('The pool is empty. No prize to distribute.');\n    }\n\n    sendCoins(this.address, winnerAddress, { uusdc: prizeAmount });\n\n    this.setParticipants([]);\n    this.setPool(0);\n\n    return winnerAddress;\n  }\n}\n", "export * from './lotto'\nexport * from './sdk'\nexport * from './type'\n\nimport { Contract } from './lotto'\n\nexport default Contract; \n"],
  "mappings": "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",
  "names": []
}
